@model LearningVM

@{
    string Name = " الدراسية | مرحله" + " " + Model.StageName;
    ViewData["Title"] = Name;
}
<!-- Container-fluid starts-->
<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="text-center my-2 py-2">
                <h3 class="fw-bold display-4">
                    الدراسية
                    <span class="text-danger">
                        @Model.StageName
                    </span>
                </h3>
            </div>
        </div>
    </div>
</div><!-- زر تحميل الجدول إلى Excel -->
<div class="container-fluid mb-3">
    <div class="row">
        <div class="col-12">
            <!-- زر إضافة مخدوم -->
            <a asp-action="Create" asp-controller="Learning" asp-route-id="@Model.StageID" class="btn btn-success">
                <i class="fa fa-plus"></i> إضافة مخدوم
            </a>

            <!-- زر تحميل و طباعة الملف -->
            <a onclick="downloadAndPrint(@Model.StageID,3,'الدراسية')" class="btn btn-primary float-right">
                <i class="fa fa-download"></i> تحميل الملف وطباعته
            </a>
            <a asp-action="attendance" asp-controller="Learning" asp-route-id="@Model.StageID" class="btn btn-info">
                <i class="fa fa-check-circle"></i> تسجيل حضور
            </a>
            <!-- زر تحميل الجدول إلى Excel -->
            <button onclick="exportToExcel('@Model.StageName')" class="btn btn-info float-right mr-2">
                <i class="fa fa-file-excel"></i>  Excel
            </button>
        </div>
    </div>
</div>

<!-- الجدول الذي يحتوي على بيانات المخدومين -->
<div class="container-fluid">
    <div class="card">
        <div class="card-body vendor-table">
            @if (Model.makhdoumswithStage.Count() > 0)
            {
                <table class="display" id="basic-1">
                    <thead>
                        <tr>
                            <th>الاسم</th>
                            <th>تاريخ الميلاد</th>
                            <th>رقم التلفون</th>
                            <th>الكوبونات </th>
                            <th> مسح </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.makhdoumswithStage)
                        {
                            <tr>
                                <td>@item.Makhdoum.Name</td>
                                <td>@String.Format("{0:dd/MM/yyyy}", item.Makhdoum.DateOfBirth)</td>
                                <td>@item.Makhdoum.PhoneNumber</td>
                                <td>
                                    <div class="form-check form-switch">
                                        <input class="form-check-input"
                                               type="checkbox"
                                               role="switch"
                                               id="toggleTicket-@item.Makhdoum.Id"
                                        @(item.Ticket == true ? "checked" : "")
                                               onchange="toggleTicket(@item.Makhdoum.Id, @Model.StageID, this.checked)">
                                        <label class="form-check-label ms-2"
                                               id="toggleLabel-@item.Makhdoum.Id"
                                               for="toggleTicket-@item.Makhdoum.Id">
                                            @(item.Ticket == true ? "تم التسليم" : "لم يتم التسليم")
                                        </label>
                                    </div>
                                </td>
                                <td>
                                    <div class="btn-group" role="group">
                                        <a onclick="confirmDelete(@item.Makhdoum.Id,@Model.StageID)" class="btn btn-danger">مسح</a>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <h5 class="text-center fw-bold display-5 bold">
                    ( @Model.StageName ) لا يوجد مخدومين مشتركين بمرحلة
                </h5>
            }
        </div>
    </div>
</div>

@section Scripts
{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.1/xlsx.full.min.js"></script>

    <script>
        // وظيفة لتصدير البيانات إلى Excel
                function exportToExcel(name) {
            const table = document.getElementById("basic-1"); // الحصول على الجدول
            const wb = XLSX.utils.table_to_book(table, { sheet: "Data" }); // تحويل الجدول إلى كتاب Excel
            const ws = wb.Sheets["Data"];

            // استرجاع نطاق الجدول
            const range = XLSX.utils.decode_range(ws['!ref']); // استرجاع نطاق الخلايا
            const colCount = range.e.c + 1; // عدد الأعمدة

            // حذف آخر عمود (الذي يحتوي على "مسح")
            ws['!ref'] = XLSX.utils.encode_range({ s: range.s, e: { r: range.e.r, c: range.e.c - 1 } });

            // التكرار على الصفوف لتنسيق التذكرة بلون الخلفية
            for (let row = range.s.r + 1; row <= range.e.r; row++) { // التكرار على الصفوف من أول صف بيانات
                const ticketCell = ws[XLSX.utils.encode_cell({ r: row, c: 3 })]; // عمود "التذكرة" (العمود الرابع)

                if (ticketCell) {
                    if (ticketCell.v === "تم التسليم") {
                        ticketCell.s = { fill: { fgColor: { rgb: "00FF00" } } }; // اللون الأخضر (خلفية)
                    } else if (ticketCell.v === "لم يتم التسليم") {
                        ticketCell.s = { fill: { fgColor: { rgb: "FF0000" } } }; // اللون الأحمر (خلفية)
                    }
                }
            }

            // تصدير الملف
        XLSX.writeFile(wb, `أسماء_الدراسية_مرحله_${name}.xlsx`);                 }



        function confirmDelete(itemId, stageId) {
            Swal.fire({
                title: 'هل أنت متأكد؟',
                text: "لن تتمكن من استعادة هذا العنصر بعد الحذف!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: 'نعم، احذف!',
                cancelButtonText: 'إلغاء'
            }).then((result) => {
                if (result.isConfirmed) {
                    // إعادة التوجيه إلى الحذف
                    window.location.href = `/learning/Delete?id=${itemId}&StageId=${stageId}`;
                }
            });
        }

        function downloadAndPrint(stageId, ActivityId, ActiveName) {
            // تحميل الملف
            window.location.href = `/learning/Upload?stageId=${stageId}&ActivityName=${ActiveName}&ActivityId=${ActivityId}`;

            // إظهار رسالة للطباعة (الطباعة تتم يدويًا بعد التنزيل)
            alert("تم تجهيز الملف. يمكنك فتحه وطباعته الآن.");
        }

      function toggleTicket(id, stageId, isChecked) {
            fetch(`/learning/ChangeTicket?id=${id}&stageId=${stageId}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Failed to update ticket status.');
                }
                return response.text();
            })
            .then(data => {
                console.log('Ticket status toggled successfully:', data);
                // Optionally, update the label text dynamically based on the new status
                const label = document.querySelector(`#toggleLabel-${id}`);
                if (isChecked) {
                    label.innerText = "تم التسليم"; // Delivered
                } else {
                    label.innerText = "لم يتم التسليم"; // Not Delivered
                }
            })
            .catch(error => {
                console.error('Error updating ticket status:', error);
                // Optionally, reset the toggle if there was an error
                const toggle = document.querySelector(`#toggleTicket-${id}`);
                toggle.checked = !isChecked; // Revert toggle
            });
        }
    </script>
}
